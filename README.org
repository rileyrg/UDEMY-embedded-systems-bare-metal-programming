#+TITLE: embedded system bare metal programming course
#+LANGUAGE: en
#+AUTHOR: rileyrg
#+EMAIL: rileyrg at g m x dot de

#+LANGUAGE: en
#+STARTUP: showall

#+EXPORT_FILE_NAME: README.md
#+OPTIONS: toc:8 num:nil

#+category: embedded
#+FILETAGS: :stm32:embedded:stm32f030r8:

#+STARTUP: overview

#+OPTIONS: toc:nil
#+OPTIONS: ^:nil

# don't export trees tagged with:
#+EXCLUDE_TAGS: tasklist noexport broken
# do not export any sections marked as tasks unless TODO or DONE
#+OPTIONS: tasks:("TODO" "DONE")
# do not include task keywords in export
#+OPTIONS: todo:nil

* Udemy Course

Following a udemy course and keeping notes etc.

https://www.udemy.com/course/embedded-systems-bare-metal-programming/learn/lecture/26702490#overview


* ST Docs

** reference manual
[[file:stm32f030r8-reference-manual.pdf]]

** datasheet
:PROPERTIES:
:ID:       3385b184-e5e1-4a8d-a3ee-a5816905e557
:END:
[[file:stm32f030r8-datasheet.pdf]]

** userguide
:PROPERTIES:
:ID:       3a8fe118-1ad1-430c-b037-7b0bb4bb0906
:END:
[[file:nucleo-stm32f030r8-userguide.pdf]]

* [[file:0-led-toggle-addr/][0-led-toggle-addr]]

** locate led

[[https://www.udemy.com/course/embedded-systems-bare-metal-programming/learn/lecture/26702988#questions][video]]

*** port and pin

Need to reference [[file:nucleo-stm32f030r8-userguide.pdf][user manual]].

#+begin_quote
User LD2: the green LED is a user LED connected to ARDUINO Â® signal D13 corresponding
to STM32 I/O PA5 (pin 21)
#+end_quote

** defining address of modules

[[https://www.udemy.com/course/embedded-systems-bare-metal-programming/learn/lecture/26702598#questions][video]]

Refer to the [[file:stm32f030r8-datasheet.pdf][datasheet]]

Search for memory mapping. Peripherals.

#+begin_quote
memory range : x4000 0000-0x4800 17ff
#+end_quote

#+begin_src c
  #define PERIPH_BASE 0x40000000ul
#+end_src

Now need to look at the register boundary address tables.

Here we see that the different peripherals are on different buses.
The BLOCK DIAGRAM depicts these buses.

#+begin_quote
APB: Advanced Peripheral Bus
AHB: Advanced High Performance Bus
#+end_quote

We see GPIO PORT A is connected to AHB.

Below the memory map, you'll see a table depicting the boundary addresses.

|------+---------------------------+------+------------|
| Bus  | Boundary Address          | Size | Peripheral |
|------+---------------------------+------+------------|
| AHB2 | 0x4800 0000 - 0x4800 03FF | 1KB  | GPIOA      |
|------+---------------------------+------+------------|

Bringing all the offsets and bases etc together:-

#+begin_src c
  #define PERIPH_BASE 0x40000000UL

  #define AHB2_PERIPH_OFFSET 0x08000000UL
  #define AHB2_PERIPH_BASE (PERIPH_BASE + AHB2_PERIPH_OFFSET)
  #define GPIOA_BUS_BASE AHB2_PERIPH_BASE
  #define GPIOA_OFFSET 0x0000UL
  #define GPIOA_BASE (GPIOA_BUS_BASE + GPIOA_OFFSET)
#+end_src

Similar for RCC

#+begin_src c
  #define AHB1_PERIPH_OFFSET 0x20000UL
  #define AHB1_PERIPH_BASE (PERIPH_BASE + AHB1_PERIPH_OFFSET)
  #define RCC_BUS_BASE AHB1_PERIPH_BASE
  #define RCC_OFFSET 0x1000UL
  #define RCC_BASE (RCC_BUS_BASE + RCC_OFFSET)
#+end_src

** creating required registers using available docs

[[https://www.udemy.com/course/embedded-systems-bare-metal-programming/learn/lecture/26702606#questions][video]]

We want to create pointers to the registers needs to control these peripherals.
We'll find in in the [[file:stm32f030r8-reference-manual.pdf][reference manual]].

*** register pointers

Course says AHB1EN. No such thing for this board.

#+begin_quote
After each device reset, all peripheral clocks are disabled (except for the SRAM and Flash).
Before using a peripheral you have to enable its clock in the RCC_AHBENR,
RCC_APB2ENR or RCC_APB1ENR register.
#+end_quote

#+begin_quote
7.4.6 AHB peripheral clock enable register (RCC_AHBENR)
Address offset: 0x14
Reset value: 0x0000 0014
#+end_quote

#+begin_src c
  ...
  #define RCC_BASE (RCC_BUS_BASE + RCC_OFFSET)
  #define RCC_AHBEN_OFFSET 0x0014UL
  #define RCC_AHBENR (RCC_BASE+RCC_AHBEN_OFFSET)
#+end_src

Control clock for GPIOA

#+begin_quote
Bit 17 IOPAEN: I/O port A clock enable
Set and cleared by software.
0: I/O port A clock disabled
1: I/O port A clock enabled
#+end_quote

#+begin_src c
#define RCC_AHBEN_GPIOAEN (1UL << 17)
#+end_src

*** registers
GPIO ports have at least two registers - direction register and data register.

[[file:stm32f030r8-reference-manual.pdf][Reference Manual]] search for *moder*

#+begin_quote
8.4.1 GPIO port mode register (GPIOx_MODER) (x =A..D, F)
Address offset:0x00
Reset values:
-  0x2800 0000 for port A
-  0x0000 0000 for other ports
#+end_quote

#+begin_src c
  #define GPIOA_MODE_OFFSET 0x0000UL
  #define GPIOA_MODER (GPIOA_BASE+GPOIA_MODE_OFFSET)
#+end_src
